digraph G {
	edge[fontname = "FangSong"];
	node[peripheries = 2, fontname = "FangSong"];
	size = "1000, 1000";

	/*--------------------------结点初始化--------------------------*/
	// 对象结点
	TcpServer[shape = box];
	Acceptor[shape = box];
	EventLoop[shape = box];
	Epoller[shape = box];
	events_[shape = box];
	channels_[shape = box];
	accept_channel_[shape = box];

	// 函数结点
	Listen[label = "Acceptor::\nListen()"];
	EnableReading[label = "Channel::\nEnableRD()"];
	Start[label = "TcpServer::Start()"];
	NewConnection[label = "TcpServer::NewConn()"];
	HandleRead[label = "Acceptor::HandleRD()"];

	/*--------------------------边的绘制----------------------------*/
	// 回调函数注册
	TcpServer -> NewConnection[style = dotted, label = "注册回调"]; 
	NewConnection  -> Acceptor[style = dotted, label = "注册回调"];
	Acceptor -> HandleRead[style = dotted, label = "注册回调"];
	HandleRead -> accept_channel_[style = dotted, label = "注册回调"];
	
	// 类之间的所属从属关系
	EventLoop -> Epoller;
	Epoller -> events_[label = "注册epoll_event"];
	Epoller -> channels_[label = "从fd->channel\n的映射"];
	TcpServer -> Acceptor;
	Acceptor -> accept_channel_;

	// 一些初始化调用
	TcpServer -> Start -> Listen;
	Listen -> EnableReading -> accept_channel_[label = "注册"];
	accept_channel_ -> Epoller[label = "注册channel"];
}
